#include "../types/atmosphere.glinl"

// This file contains all methods used in Raymarching the atmosphere

// Based on:
// "A Scalable and Production Ready Sky and Atmosphere Rendering Technique" by Sébastien Hillaire (2020)
// https://sebh.github.io/publications/egsr2020.pdf
//
// "Precomputed Atmospheric Scattering: a New Implementation" by Eric Bruneton (2017)
// https://ebruneton.github.io/precomputed_atmospheric_scattering


const int TRANSMITTANCE_LUT_WIDTH = 512;
const int TRANSMITTANCE_LUT_HEIGHT = 128;

const float METERS_PER_MM = 1000000;

const float PI = 3.141592653589793;

// Transmittance LUT UV mapping based on Bruneton et al. 2017 method
// https://ebruneton.github.io/precomputed_atmospheric_scattering/atmosphere/functions.glsl#transmittance_lookup

float safeSqrt(float value)
{
    return sqrt(max(value, 0.0));
}

// Squeeze in UV values by half a texel, so the bounds of our sampled function can be stored precisely at the edge of the texture
float textureCoordFromUnitRange(float value, int dimension)
{
    return 0.5 / float(dimension) + value * (1.0 - 1.0 / float(dimension));
}
float unitRangeFromTextureCoord(float texCoord, int dimension)
{
    return (texCoord - 0.5 / float(dimension)) / (1.0 - 1.0 / float(dimension));
}

// Radius is the distance in Mm from the center of the planet, aka length of position vector
// Mu is the cosine of the angle between the position vector and the direction vector we want to sample the transmittance in
vec2 transmittanceLUT_RMu_to_UV(const Atmosphere atmosphere, const float radius, const float mu)
{
    const float atmospherRadiusMmSquared = atmosphere.atmosphereRadiusMm * atmosphere.atmosphereRadiusMm;
    const float planetRadiusMmSquared = atmosphere.planetRadiusMm * atmosphere.planetRadiusMm;

    // Ground level, horizontal ray distance to atmospheric boundary
    const float H = safeSqrt(atmospherRadiusMmSquared - planetRadiusMmSquared);

    // Distance to horizon, which is also the exact position the previous horizontal ray starts at
    const float rho = safeSqrt(radius * radius - planetRadiusMmSquared);

    // rho + H = distance to atmosphere boundary when looking at the horizon
    // It represents the distance along the biggest angle (most negative mu) that has nonzero transmittance, 
    // since any lower and we intersect the planet
    // This angle changes as the radius does, so this mapping seeks to compress a different range of mu values
    // at any given radius value

    // Distance to edge of atmosphere, with both its min and max values at this given radius. 
    const float d = max(-radius * mu + safeSqrt(radius * radius * (mu * mu - 1.0) + atmospherRadiusMmSquared), 0.0);
    const float d_min = atmosphere.atmosphereRadiusMm - radius;
    const float d_max = rho + H;

    const float x_mu = (d - d_min) / (d_max - d_min);
    const float x_radius = rho / H;

    return vec2(textureCoordFromUnitRange(x_mu, TRANSMITTANCE_LUT_WIDTH), textureCoordFromUnitRange(x_radius, TRANSMITTANCE_LUT_HEIGHT));
}

// Inverse of transmittanceLUT_RMu_to_UV
vec2 transmittanceLUT_UV_to_RMu(const Atmosphere atmosphere, const vec2 uv)
{
    const float x_mu = unitRangeFromTextureCoord(uv.s, TRANSMITTANCE_LUT_WIDTH);
    const float x_radius = unitRangeFromTextureCoord(uv.t, TRANSMITTANCE_LUT_HEIGHT);

    const float atmospherRadiusMmSquared = atmosphere.atmosphereRadiusMm * atmosphere.atmosphereRadiusMm;
    const float planetRadiusMmSquared = atmosphere.planetRadiusMm * atmosphere.planetRadiusMm;

    // Ground level, horizontal ray distance to atmospheric boundary
    const float H = safeSqrt(atmospherRadiusMmSquared - planetRadiusMmSquared);

    const float rho = H * x_radius;

    const float radius = sqrt(rho * rho + planetRadiusMmSquared);

    const float d_min = atmosphere.atmosphereRadiusMm - radius;
    const float d_max = rho + H;

    const float d = (d_max - d_min) * x_mu + d_min;

    if (d == 0.0)
    {
        // mu is ambiguous since we are at the very edge of the atmosphere, where no angle produces valid transmittance values
        return vec2(radius, 1.0);
    }

    const float mu = (H * H - rho * rho - d * d) / (2.0 * radius * d);
    // Equivalenty, mu = (atmospherRadiusMmSquared - radius * radius - d*d) / (2.0 * radius * d)
    // But atmospherRadiusMmSquared and radius * radius are large, so this avoids floating point errors from adding 
    // these to the much smaller d * d

    // This clamp is very important
    return vec2(radius, clamp(mu, -1.0, 1.0));
}

vec3 sampleTransmittanceLUT_Ray(sampler2D LUT, const Atmosphere atmosphere, const vec3 position, const vec3 direction)
{
    const float radius = length(position);
    const float mu = (dot(position, direction) / (length(position) * length(direction)));

    const vec2 uv = transmittanceLUT_RMu_to_UV(atmosphere, radius, mu);

    return texture(LUT, uv).rgb;
}

vec3 sampleTransmittanceLUT_Segment(sampler2D LUT, const Atmosphere atmosphere, const vec3 from, const vec3 to)
{
    // Floats do not have enough range to store the very low transmittance of a ray crossing the longest distances.
    // Thus, a sliver of the transmittance LUT near the horizon is zero when it should be a very small value.
    // Also, rays that point at the planet return a transmittance of exactly 0 making it impossible to use such samples.
    // Thus, we sometimes swap the rays depending on how they are oriented.

    vec3 transmittance;
    vec3 direction = normalize(to - from);

    // Proxy for hitting the ground. 
    // This check does not necessarily mean the ray hits the ground, but it is safe to flip anyway.
    if (dot(from, direction) < 0.0)
    {
        transmittance = sampleTransmittanceLUT_Ray(LUT, atmosphere, to, -direction) / sampleTransmittanceLUT_Ray(LUT, atmosphere, from, -direction);
    }
    else
    {
        transmittance = sampleTransmittanceLUT_Ray(LUT, atmosphere, from, direction) / sampleTransmittanceLUT_Ray(LUT, atmosphere, to, direction);
    }

    return clamp(transmittance, 0.0, 1.0);
}

vec3 sampleTransmittanceLUT_RadiusMu(sampler2D LUT, const Atmosphere atmosphere, const float radius, const float mu)
{
    const vec2 uv = transmittanceLUT_RMu_to_UV(atmosphere, radius, mu);

    return texture(LUT, uv).rgb;
}

vec3 sampleTransmittanceLUT_Sun(sampler2D LUT, const Atmosphere atmosphere, const float radius, const float cos_sunZenith)
{
    const float sin_sunRadius = sin(atmosphere.sunAngularRadius);
    const float cos_sunRadius = cos(atmosphere.sunAngularRadius);

    /* 
    Possible small angle approximation
    const float sin_sunRadius = SUN_ANGULAR_RADIUS_RADIANS;
    const float cos_sunRadius = 1.0;
    */

    const float sin_horizonZenith = atmosphere.planetRadiusMm / radius;
    // Negative since the horizon zenith varies from PI/2 to PI
    const float cos_horizonZenith = -safeSqrt(1.0 - sin_horizonZenith * sin_horizonZenith);

    // This sample makes no assumption about ground intersection
    const vec3 transmittanceThroughAtmosphere = sampleTransmittanceLUT_RadiusMu(LUT, atmosphere, radius, cos_sunZenith);

    // angularFactor goes from 1 to 0 as sunZenith varies from horizonZenith - sunRadius to horizonZenith + sunRadius
    // Or as cos(sunZenith) varies from cos(horizonZenith - sunRadius) to cos(horizonZenith + sunRadius)
    // Using angle sum identity, we get that:
    // cos(horizonZenith - sunRadius) = cos(horizonZenith)cos(sunRadius) + sin(sunRadius)sin(horizonZenith)
    // cos(horizonZenith + sunRadius) = cos(horizonZenith)cos(sunRadius) - sin(sunRadius)sin(horizonZenith)
    
    const float angularFactor = smoothstep(-sin_horizonZenith * sin_sunRadius, sin_horizonZenith * sin_sunRadius, cos_sunZenith - cos_horizonZenith * cos_sunRadius);

    return transmittanceThroughAtmosphere * angularFactor;
}
// Ensure altitude and densityScale are the same units.
float densityExponential(const float altitude, const float densityScale)
{
    return exp(-altitude / densityScale);
}

// Hardcoded with values for ozone
float densityTent(const float altitude_km) { return max(0.0, 1.0 - abs(altitude_km - 25.0) / 15.0); }

struct ExtinctionSample
{
    vec3 scatteringRayleigh;
    vec3 scatteringMie;
    vec3 scatteringOzone;

    vec3 absorptionRayleigh;
    vec3 absorptionMie;
    vec3 absorptionOzone;

    // This parameter is redundant, but convenient.
    // It is the sum of all scattering values.
    vec3 scattering;

    vec3 extinction;
};

// Returned units are per Mm. Take care that this function takes in altitude, NOT radius.
// radius := altitude + planetRadius
ExtinctionSample sampleExtinction(const Atmosphere atmosphere, const float altitude_Mm)
{
    const float densityRayleigh = densityExponential(altitude_Mm, atmosphere.densityScaleRayleighMm);
    const vec3 scatteringRayleigh = atmosphere.scatteringRayleighPerMm * densityRayleigh;
    const vec3 absorptionRayleigh = atmosphere.absorptionRayleighPerMm * densityRayleigh;

    const float densityMie = densityExponential(altitude_Mm, atmosphere.densityScaleMieMm);
    const vec3 scatteringMie = atmosphere.scatteringMiePerMm * densityMie;
    const vec3 absorptionMie = atmosphere.absorptionRayleighPerMm * densityMie;

    const float densityOzone = densityTent(altitude_Mm * 1000.0);
    const vec3 scatteringOzone = atmosphere.scatteringOzonePerMm * densityOzone;
    const vec3 absorptionOzone = atmosphere.absorptionOzonePerMm * densityOzone;

    ExtinctionSample extinctionSample;
    
    extinctionSample.scatteringRayleigh = scatteringRayleigh;
    extinctionSample.scatteringMie = scatteringMie;
    extinctionSample.scatteringOzone = scatteringOzone;

    extinctionSample.absorptionRayleigh = absorptionRayleigh;
    extinctionSample.absorptionMie = absorptionMie;
    extinctionSample.absorptionOzone = absorptionOzone;

    extinctionSample.scattering = scatteringRayleigh + scatteringMie + scatteringOzone;
    extinctionSample.extinction = extinctionSample.scattering + absorptionRayleigh + absorptionMie + absorptionOzone;

    return extinctionSample;
}

// t1 > t0, values can be negative. Function returns true even if the sphere is behind the ray.
// If this returns false, t0 and t1 are unchanged.
bool raySphereIntersection(vec3 rayOrigin, vec3 rayDirectionNormalized, float radius, out float t0, out float t1)
{
    // Method taken from "Precision Improvements for Ray/Sphere Intersection"
    // by Eric Haines, Johannes Günther, and Tomas Akenine-Möller
    //
    // The method includes tricks to reduce float point inaccuracy errors.

    const vec3 f = rayOrigin;
    const vec3 d = rayDirectionNormalized;
    const float b = -1.0 * dot(f, d);
    const vec3 centerToIntersectionChord = f + b * d;
    const float discriminant = radius * radius - dot(centerToIntersectionChord, centerToIntersectionChord);
    const float c = dot(f, f) - radius * radius;

    if (discriminant < 0.0)
    {
        return false;
    }

    float q = b;
    if (b < 0.0)
    {
        q -= sqrt(discriminant);
    }
    else
    {
        q += sqrt(discriminant);
    }

    t0 = c / q;
    t1 = q;

    if (t0 > t1)
    {
        const float temp = t0;
        t0 = t1;
        t1 = temp;
    }

    return true;
}

// Input cosine is the cosine of the angle between incident and outgoing scattering directions
float phaseRayleigh(const float cosine)
{
    const float scalar = 3.0 / (16.0 * PI);
    const float numerator = (1.0 + cosine * cosine);

    return scalar * numerator;
}
// Input cosine is the cosine of the angle between incident and outgoing scattering directions
// Input g is a value from -1 to 1 that controls the concentration of back vs forward scattering.
// Note: g = 0 reduces to the case of our rayleigh phase function
float phaseMie(const float cosine, const float g)
{
    const float scalar = 3.0 / (8.0 * PI);
    const float numerator = (1.0 - g * g) * (1.0 + cosine * cosine);
    const float denominator = (2.0 + g * g) * pow(1.0 + g * g - 2.0 * g * cosine, 1.5);
    return scalar * numerator / denominator;
}

// Not in use for now, intended for estimating multi-scattering
const float phaseIsotropic = 1.0 / (4.0 * PI);

void raycastAtmosphere(const Atmosphere atmosphere, const vec3 origin, const vec3 direction, out float atmosphereDistance)
{
    float atmosphere_t0, atmosphere_t1;
    const bool hitAtmosphere =
        raySphereIntersection(origin, direction, atmosphere.atmosphereRadiusMm, atmosphere_t0, atmosphere_t1)
        && atmosphere_t1 > 0.0;

    atmosphereDistance = 0.0;
    atmosphere_t0 = max(0.0, atmosphere_t0);

    // TODO: Figure out what to do when inside the planet
    float planet_t0, planet_t1;
    const bool hitPlanet =
        raySphereIntersection(origin, direction, atmosphere.planetRadiusMm, planet_t0, planet_t1) && planet_t0 > 0.0;
    if (hitPlanet)
    {
        atmosphere_t1 = min(planet_t0, atmosphere_t1);
    }

    if (hitAtmosphere)
    {
        atmosphereDistance = atmosphere_t1 - atmosphere_t0;
    }
}

struct RaymarchStep
{
    float radius;
    float mu;
    float mu_sun;
};

RaymarchStep stepRadiusMu(const RaymarchStep start, const float stepDistance)
{
    // Consider starting position (0, radius, 0) 
    // and step vector of d * (sqrt(1 - mu * mu), mu, 0)

    // When computing changes in radii and mu, we use this method everywhere since norm is preserved upon rotation 
    // and all cases of stepping can be reduced to the above two vectors

    // cosine sum identity for sun zenith and direction zenith
    const float mu_sunAndStepDirection = safeSqrt(start.mu_sun * start.mu - safeSqrt((1.0 - start.mu_sun * start.mu_sun) * (1.0 - start.mu * start.mu)));

    RaymarchStep result;

    result.radius = safeSqrt(stepDistance * stepDistance + 2.0 * start.radius * start.mu * stepDistance + start.radius * start.radius);
    result.mu = (start.radius * start.mu + stepDistance) / result.radius;
    result.mu_sun = (start.radius * start.mu_sun + stepDistance * mu_sunAndStepDirection) / result.radius;

    return result;
}

vec3 sampleTransmittanceLUT_RayMarchStep(const Atmosphere atmosphere, sampler2D LUT, const RaymarchStep start, const float stepDistance)
{
    if (stepDistance < 0.0000001)
    {   
        return vec3(1.0);
    }

    const RaymarchStep end = stepRadiusMu(start, stepDistance);

    vec3 transmittance;
    if (start.mu > 0.0)
    {
        // Oriented up into atmosphere, so we directly sample LUT
        transmittance = sampleTransmittanceLUT_RadiusMu(LUT, atmosphere, start.radius, start.mu) 
            / sampleTransmittanceLUT_RadiusMu(LUT, atmosphere, end.radius, end.mu);
    }
    else
    {
        // Oriented down towards planet, so direct samples would be invalid
        // Instead, we flip the direction
        transmittance = sampleTransmittanceLUT_RadiusMu(LUT, atmosphere, end.radius, -end.mu) 
            / sampleTransmittanceLUT_RadiusMu(LUT, atmosphere, start.radius, -start.mu);
    }

    return clamp(transmittance, 0.0, 1.0);
}

const uint SKY_VIEW_LUT_SAMPLE_COUNT = 32;
vec3 computeLuminanceScatteringIntegral(const Atmosphere atmosphere, sampler2D transmittanceLUT, const vec3 origin, const vec3 direction, const float sampleDistance)
{
    // This is the direction of the incoming light, which is the light we are interested in computing the magnitude of.
    // For the purposes of calculating phase functions, this is the direction we want to use.
    const vec3 scatteringDir = -normalize(direction);

    const float radius = length(origin);
    const float mu = dot(origin, direction) / (length(origin) * length(direction));
    const float mu_sun = dot(origin, -atmosphere.incidentDirectionSun) / (length(origin) * length(atmosphere.incidentDirectionSun));

    const RaymarchStep originStep = RaymarchStep(radius, mu, mu_sun);

    vec3 luminance = vec3(0.0);

    vec3 transmittance = vec3(1.0);

    // We estimate the integral in Equation (1) of Hillaire's paper.

    const float dSampleDistance = sampleDistance / SKY_VIEW_LUT_SAMPLE_COUNT;
    for (uint i = 0; i < SKY_VIEW_LUT_SAMPLE_COUNT; i++)
    {
        const float t = i * dSampleDistance;
        const vec3 begin = origin - (float(i) * dSampleDistance) * scatteringDir;
        const vec3 end = origin - (float(i + 1) * dSampleDistance) * scatteringDir;

        const RaymarchStep sampleStep = stepRadiusMu(originStep, t);

        const float altitude = length(begin) - atmosphere.planetRadiusMm;

        const vec3 transmittanceToSun = sampleTransmittanceLUT_Sun(transmittanceLUT, atmosphere, sampleStep.radius, sampleStep.mu_sun);

        const ExtinctionSample extinctionSample = sampleExtinction(atmosphere, altitude);

        // Terms of Equation (3) we assume to not vary over the path segment

        // We could accumulate samples across loops like:
        //
        // const vec3 sampleTransmittance = exp(-dSampleDistance * extinctionSample.extinction);
        // ... compute luminance using transmittance ...
        // transmittance *= sampleTransmittance;
        //
        // But at the cost of performance, resampling the transmittance LUT is more accurate for larger step sizes

        const vec3 transmittanceToBegin = sampleTransmittanceLUT_RayMarchStep(atmosphere, transmittanceLUT, originStep, t);
        const float incidentCosine = dot(atmosphere.incidentDirectionSun, scatteringDir);

        // Ozone does not scatter light, so we arbitrarily use rayleigh's phase function in case ozone's scattering
        // coefficient in nonzero
        const vec3 phaseTimesScattering = extinctionSample.scatteringRayleigh * phaseRayleigh(incidentCosine)
                                        + extinctionSample.scatteringMie * phaseMie(incidentCosine, 0.8) 
                                        + extinctionSample.scatteringOzone * phaseRayleigh(incidentCosine);

        const vec3 shadowing = transmittanceToSun;

        // Integrate transmittance := e^(-extinction(x) * ||x - begin||) from begin to end
        // This is a single interval of the integral in Equation (1) from Hillaire's paper,
        // with all constant terms factored out above
        const vec3 transmittanceAlongPath = sampleTransmittanceLUT_Segment(transmittanceLUT, atmosphere, begin, end);
        const vec3 scatteringIlluminanceIntegral = (vec3(1.0) - transmittanceAlongPath) / extinctionSample.extinction;

        luminance += phaseTimesScattering * shadowing * scatteringIlluminanceIntegral
                    * transmittanceToBegin;
    }

    return luminance;
}