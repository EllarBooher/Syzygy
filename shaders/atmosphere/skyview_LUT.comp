#version 460
#extension GL_EXT_buffer_reference2 : require
#extension GL_ARB_shading_language_include : require

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba32f, set = 0, binding = 0) uniform image2D skyview_LUT;
layout(set = 0, binding = 1) uniform sampler2D transmittance_LUT;
layout(set = 0, binding = 2) uniform sampler2D multiscatter_LUT;

#include "../types/camera.glsl"

#ifndef SZG_MULTISCATTERING_ENABLED
#define SZG_MULTISCATTERING_ENABLED 1
#endif

#include "common.glinl"

layout(buffer_reference, std430) readonly buffer AtmosphereBuffer
{
    Atmosphere atmospheres[];
};

layout(buffer_reference, std430) readonly buffer CameraBuffer
{
    Camera cameras[];
};

layout(buffer_reference, std430) readonly buffer LightDirectionalBuffer
{
    LightDirectional lights[];
};

layout(push_constant) uniform PushConstant
{
    AtmosphereBuffer atmosphereBuffer;
    CameraBuffer cameraBuffer;

    uint atmosphereIndex;
    uint cameraIndex;

    LightDirectionalBuffer directionalLights;

    uint sunLightIndex;
} pc;

// All units are Mm/megameters (10^6 meters) unless marked km/kilometers (10^3 meters)

// This shader builds a 2D sky-view LUT, which is a lattitude-longitude map of
// the sky with only the planet's surface shadowing.
// This map contains the total luminance from in-scattering due to atmospheric effects.
//
// The purpose of this map is to provide a fast-path when rendering the sky. This texture can be sampled instead of
// performing the calculations. Calculations are (probably) still necessary when geometry intersects the view ray.
//
// This map only depends on altitude, and allows the camera to be freely rotated
// without requiring recomputation. There is even an acceptable degree of movement
// by the camera within a range of the provided altitude.
//
// Parameterized as follows:
// u := azimuth angle
// u varies from -pi to pi
//
// v := solar elevation
// v varies from -pi/2 to pi/2

void uv_to_azimuthElevation(
    const Atmosphere atmosphere, const LightDirectional celestialLight, const float radius, const vec2 uv, out float azimuth, out float elevation)
{
    // Horizon zenith cannot be less than PI/2, so we use sin and assume it is a quadrant 2 angle
    const float sinHorizonZenith = atmosphere.planetRadiusMm / radius;
    const float horizonZenith = PI - asin(sinHorizonZenith);

    // u stores light-relative azimuth
    const float cosineViewLightProjected = (uv.s - 0.5) * 2.0;
    const vec2 lightDirectionProjected =
        normalize(vec2(-celestialLight.forward.x, -celestialLight.forward.z));

    float azimuthSun = asin(lightDirectionProjected.x);
    if (lightDirectionProjected.y < 0.0)
    {
        azimuthSun = PI - azimuthSun;
    }

    azimuth = acos(clamp(cosineViewLightProjected, -1.0, 1.0)) + azimuthSun;

    float viewZenith;

    if (uv.t < 0.5)
    {
        const float unnormalized_v = 2.0 * uv.t - 1.0;
        const float angleFraction = 1.0 - unnormalized_v * unnormalized_v;

        viewZenith = angleFraction * horizonZenith;
    }
    else
    {
        const float unnormalized_v = 2.0 * uv.t - 1.0;
        const float angleFraction = unnormalized_v * unnormalized_v;

        viewZenith = (PI - horizonZenith) * angleFraction + horizonZenith;
    }

    elevation = -(viewZenith - PI / 2.0);
}

void main()
{
    const vec2 size = imageSize(skyview_LUT);
    const ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (texelCoord.x >= size.x || texelCoord.y >= size.y)
    {
        return;
    }

    const vec2 offset = vec2(0.5, 0.5);
    const vec2 uv = (vec2(texelCoord) + offset) / size;

    const Camera camera = pc.cameraBuffer.cameras[pc.cameraIndex];
    const Atmosphere atmosphere = pc.atmosphereBuffer.atmospheres[pc.atmosphereIndex];
    const LightDirectional sunDirectionalLight = pc.directionalLights.lights[pc.sunLightIndex];

    // +x right, +y up, +z forward
    // Note: engine has +y down, but these coordinates are separate and based on azimuth, elevation.
    // +azimuth right, +elevation up

    vec3 origin = camera.position.xyz / METERS_PER_MM;
    origin += atmosphere.planetRadiusMm * WORLD_UP;

    float azimuth;
    float elevation;
    uv_to_azimuthElevation(atmosphere, sunDirectionalLight, length(origin), uv, azimuth, elevation);

    const vec3 direction =
        normalize(vec3(sin(azimuth) * cos(elevation), WORLD_UP.y * sin(elevation), cos(azimuth) * cos(elevation)));

    const bool includeGround = false;
    const vec3 luminance = computeLuminanceScatteringIntegral(
                               atmosphere, sunDirectionalLight, transmittance_LUT, multiscatter_LUT, origin, direction, includeGround)
                               .luminance;

    imageStore(skyview_LUT, texelCoord, vec4(luminance, 1.0));
}