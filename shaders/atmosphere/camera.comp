#version 460
#extension GL_EXT_buffer_reference2 : require
#extension GL_ARB_shading_language_include : require
#extension GL_EXT_nonuniform_qualifier : require

#include "../gbuffer/gbuffer.glinl"
#include "../gbuffer/pbr.glinl"
#include "../shadowmap.glinl"
#include "../types/camera.glsl"
#include "../types/lights.glsl"

#ifndef SZG_MULTISCATTERING_ENABLED
#define SZG_MULTISCATTERING_ENABLED 1
#endif

#include "common.glinl"

// This shader renders the ground and sky, while consuming a GBuffer to light opaque geometry with the sun

layout(local_size_x = 16, local_size_y = 16) in;

// Scene render target
layout(rgba16, set = 0, binding = 0) uniform image2D image;
layout(set = 0, binding = 1) uniform sampler2D fragmentDepth;

// Atmosphere LUTs
layout(set = 1, binding = 0) uniform sampler2D skyview_LUT;
layout(set = 1, binding = 1) uniform sampler2D transmittance_LUT;
layout(set = 1, binding = 2) uniform sampler2D multiscatter_LUT;

// Opaque geometry GBuffer

SZG_DECLARE_GBUFFER_SET(2)
#include "../gbuffer/gbufferFunctions.glinl"
#include "../gbuffer/pbrFunctions.glinl"

// Scattered directional lights' shadowmaps, just the sun for now
layout(set = 3, binding = 0) uniform sampler shadowMapSampler;
layout(set = 4, binding = 0) uniform texture2D shadowMaps[];

layout(buffer_reference, std430) readonly buffer AtmosphereBuffer
{
    Atmosphere atmospheres[];
};

layout(buffer_reference, std430) readonly buffer CameraBuffer
{
    Camera cameras[];
};

layout(buffer_reference, std430) readonly buffer LightDirectionalBuffer
{
    LightDirectional lights[];
};

layout(push_constant) uniform PushConstant
{
    AtmosphereBuffer atmosphereBuffer;
    CameraBuffer cameraBuffer;

    uint atmosphereIndex;
    uint cameraIndex;

    uvec2 drawExtent;

    uint sunShadowMapIndex;
    uint padding0;

    uvec2 gbufferExtent;

    LightDirectionalBuffer directionalLights;
    uint sunLightIndex;
} pc;

vec3 sampleMap_Direction(const Atmosphere atmosphere, const vec3 position, const vec3 direction)
{
    const vec3 normalized = normalize(direction);

    // Horizon zenith cannot be less than PI/2, so we use sin and assume it is a quadrant 2 angle
    const float sinHorizonZenith = atmosphere.planetRadiusMm / length(position);
    const float horizonZenith = PI - asin(sinHorizonZenith);

    const float cosViewZenith = normalized.y;
    const float cosHorizonZenith = -safeSqrt(1.0 - sinHorizonZenith * sinHorizonZenith);

    const float viewZenith = acos(normalized.y);

    // We still want uv.y = 0 and uv.y = 1 to the extreme zenith angles
    // But since we make the horizon a straight line through the middle, and its zenith may not be PI/2,
    // we must scale angles differently depending on if they are above or below the horizon.

    float u, v;

    if (cosViewZenith > cosHorizonZenith)
    {
        // Above horizon, v shall range from 0.0 to 0.5
        // viewZenith varies from 0 to horizonZenith

        const float angleFraction = viewZenith / horizonZenith;

        // Increase angle density towards v = 0.5
        v = (1.0 - sqrt(1.0 - angleFraction)) * 0.5;
    }
    else
    {
        // Below horizon, v shall range from 0.5 to 1
        // viewZenith varies from horizonZenith to PI

        const float angleFraction = (viewZenith - horizonZenith) / (PI - horizonZenith);

        // Increase angle density towards v = 0.5
        v = sqrt(angleFraction) * 0.5 + 0.5;
    }

    {
        // Sun is always positioned at u = 0, so u is computed relative to the light direction

        const vec2 projectedLightDirection =
            normalize(vec2(-atmosphere.incidentDirectionSun.x, -atmosphere.incidentDirectionSun.z));
        const vec2 projectedViewDirection = normalize(vec2(direction.x, direction.z));

        u = clamp(dot(projectedLightDirection, projectedViewDirection), -1.0, 1.0) * 0.5 + 0.5;
    }

    return texture(skyview_LUT, vec2(u, v)).rgb;
}

vec3 sampleSunDisk(const Atmosphere atmosphere, const vec3 position, const vec3 direction)
{
    const vec3 directionToSun = -atmosphere.incidentDirectionSun;

    const float cosDirectionSun = dot(direction, directionToSun) / (length(direction) * length(directionToSun));

    const float sinSunRadius = atmosphere.sunAngularRadius;
    const float sinDirectionSun = safeSqrt(1.0 - cosDirectionSun * cosDirectionSun);

    const vec3 transmittanceToSun = sampleTransmittanceLUT_Ray(transmittance_LUT, atmosphere, position, direction);

    if (cosDirectionSun < 0.0)
    {
        return vec3(0.0);
    }

    return transmittanceToSun * (1.0 - smoothstep(0.2 * sinSunRadius, sinSunRadius, sinDirectionSun));
}

float computeFractionOfSunVisible(const Atmosphere atmosphere, const float radius)
{
    const float sinHorizonZenith = atmosphere.planetRadiusMm / radius;
    const float cosSunZenith = -atmosphere.incidentDirectionSun.y;

    return sinHorizonZenith;

    // Ignore third dimension, since earth is a symmetrical sphere
    const vec2 directionToHorizon =
        normalize(vec2(sinHorizonZenith, safeSqrt(1.0 - sinHorizonZenith * sinHorizonZenith)));
    const vec2 directionToSun = normalize(vec2(safeSqrt(1.0 - cosSunZenith * cosSunZenith), cosSunZenith));

    const float cosHorizonSun = dot(directionToHorizon, directionToSun);

    // + when above horizon, - when below
    const float sinHorizonSun =
        sign(directionToSun.y - directionToHorizon.y) * safeSqrt(1.0 - cosHorizonSun * cosHorizonSun);

    const float sinSunRadius = sin(atmosphere.sunAngularRadius);

    if (sinHorizonSun > sinSunRadius)
    {
        return 1.0;
    }
    else if (sinHorizonSun < -sinSunRadius)
    {
        return 0.0;
    }

    // Approximation of the area of the chorded segment above the horizon divided by the area of the circle
    return 0.5 * (sinHorizonSun / sinSunRadius) + 0.5;
}

bool raycastDistanceToGround(const Atmosphere atmosphere,
                             const vec3 origin,
                             const vec3 direction,
                             out float distanceToGround)
{
    float planet_t0, planet_t1;
    const bool hitPlanet =
        raySphereIntersection(origin, direction, atmosphere.planetRadiusMm, planet_t0, planet_t1) && planet_t0 > 0.0;

    if (!hitPlanet)
    {
        return false;
    }

    distanceToGround = planet_t0;

    return true;
}

bool raycastHitTestPlanet(const Atmosphere atmosphere, const vec3 origin, const vec3 direction)
{
    float planet_t0, planet_t1;
    const bool hitPlanet =
        raySphereIntersection(origin, direction, atmosphere.planetRadiusMm, planet_t0, planet_t1) && planet_t0 > 0.0;

    return hitPlanet;
}

vec3 sampleGround(const Atmosphere atmosphere, const vec3 origin, const vec3 direction, const float distanceToGround)
{
    // Assumes the ray hits the ground

    const vec3 surfacePosition = origin + distanceToGround * direction;
    const vec3 surfaceNormal = normalize(surfacePosition);

    const vec3 lightDirection = -atmosphere.incidentDirectionSun;
    const vec3 viewDirection = -direction;
    // Quick and dirty estimate of surface albedo
    const vec3 halfwayDirection = normalize(lightDirection + viewDirection);
    const float specularPower = 160.0;
    const float microfacetAttenuation = pow(clamp(dot(halfwayDirection, surfaceNormal), 0.0, 1.0), specularPower);
    const float normalizationTerm = (specularPower + 2) / 8.0;
    const vec3 specular = vec3(normalizationTerm * microfacetAttenuation);
    const vec3 diffuse = vec3(0.4) / PI;

    const vec3 fresnel =
        vec3(0.04) + (1.0 - vec3(0.04)) * pow(1.0 - clamp(dot(halfwayDirection, lightDirection), 0.0, 1.0), 5);
    const vec3 albedo = mix(diffuse, specular, fresnel);

    vec3 transmittanceToSun =
        sampleTransmittanceLUT_Ray(transmittance_LUT, atmosphere, surfacePosition, lightDirection);

    const vec3 surfaceLuminance = transmittanceToSun * albedo * clamp(dot(surfaceNormal, lightDirection), 0.0, 1.0);
    const vec3 transmittanceToSurface =
        sampleTransmittanceLUT_Segment(transmittance_LUT, atmosphere, origin, surfacePosition);

    const vec3 aerielPerspectiveLuminance =
        computeLuminanceScatteringIntegral(
            atmosphere, transmittance_LUT, multiscatter_LUT, origin, direction, distanceToGround)
            .luminance;

    return surfaceLuminance * transmittanceToSurface + aerielPerspectiveLuminance;
}

vec3 computeGeometryLuminanceTransfer(const Atmosphere atmosphere,
                                      const vec3 origin,
                                      const vec3 direction,
                                      const PBRTexel material,
                                      const float shadowFactor)
{
    // Alternative way to compute surface position
    // const vec4 positionViewSpace = camera.inverseProjection * vec4(clipSpaceUV, sceneDepth, 1.0);
    // distanceToGround = length(positionViewSpace) / 1000000.0;
    // const vec3 surfacePosition = position + distanceToGround * direction;

    const vec3 surfacePosition = material.position;

    const vec3 transmittanceToSurface =
        sampleTransmittanceLUT_Segment(transmittance_LUT, atmosphere, origin, surfacePosition);

    const vec3 lightDirection = normalize(-atmosphere.incidentDirectionSun);
    const vec3 viewDirection = normalize(-direction);

    const bool surfaceShadowedByPlanet = raycastHitTestPlanet(atmosphere, surfacePosition, lightDirection);

    const vec3 diffuseContribution = diffuseBRDF(material, lightDirection);
    const vec3 specularContribution = specularBRDF(material, lightDirection, viewDirection);

    const vec3 fresnel = computeFresnel(material, lightDirection, viewDirection);

    const vec3 transmittanceToSun =
        sampleTransmittanceLUT_Ray(transmittance_LUT, atmosphere, surfacePosition, lightDirection);

    const float fractionOfSunVisible = computeFractionOfSunVisible(atmosphere, length(material.position));

    const vec3 surfaceTransfer = shadowFactor * fractionOfSunVisible * float(!surfaceShadowedByPlanet)
                               * transmittanceToSun * transmittanceToSurface * material.occlusion
                               * mix(diffuseContribution, specularContribution, fresnel)
                               * clamp(dot(material.normal, lightDirection), 0.0, 1.0);

    const float distanceToGround = length(surfacePosition - origin);
    const vec3 aerialPerspectiveLuminance =
        computeLuminanceScatteringIntegral(
            atmosphere, transmittance_LUT, multiscatter_LUT, origin, direction, distanceToGround)
            .luminance;

    return surfaceTransfer + aerialPerspectiveLuminance;
}

vec3 reflectDirection(const vec3 normal, const vec3 outgoingDirection)
{
    const vec3 parallel = dot(normal, outgoingDirection) * normal;
    return 2.0 * parallel - outgoingDirection;
}

vec3 sampleEnvironmentLuminanceTransfer(const Atmosphere atmosphere,
                                        const vec3 position,
                                        const vec3 direction,
                                        const float sunShadowFactor)
{
    float distanceToGround;
    if (raycastDistanceToGround(atmosphere, position, direction, distanceToGround))
    {
        return sampleGround(atmosphere, position, direction, distanceToGround);
    }
    else
    {
        return sampleMap_Direction(atmosphere, position, direction)
             + sampleSunDisk(atmosphere, position, direction) * sunShadowFactor;
    }
}

void main()
{
    const vec2 size = imageSize(image);
    const ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (texelCoord.x >= size.x || texelCoord.y >= size.y)
    {
        return;
    }

    const Camera camera = pc.cameraBuffer.cameras[pc.cameraIndex];
    const Atmosphere atmosphere = pc.atmosphereBuffer.atmospheres[pc.atmosphereIndex];

    const vec2 uvFull = (vec2(texelCoord) + vec2(0.5, 0.5)) / size;
    const float sceneDepth = texture(fragmentDepth, uvFull).r;

    // Convert from engine position (in meters with -y up)
    // and the skyview coordinates (in megameters with +y up)
    vec3 position = camera.position.xyz / METERS_PER_MM;
    position.y *= -1;
    position.y += atmosphere.planetRadiusMm;

    const vec2 clipSpaceUV = vec2((gl_GlobalInvocationID.xy / vec2(pc.drawExtent)) - 0.5) * 2.0;
    const float nearPlaneDepth = 1.0;
    const vec4 directionViewSpace = camera.inverseProjection * vec4(clipSpaceUV, nearPlaneDepth, 1.0);
    vec3 direction = normalize((camera.rotation * directionViewSpace).xyz);
    direction.y *= -1;

    const float radius = length(position);
    const float sin_horizonZenith = atmosphere.planetRadiusMm / radius;
    const float cos_horizonZenith = -safeSqrt(1.0 - sin_horizonZenith * sin_horizonZenith);

    vec3 sunIlluminanceToSkyLuminanceTransfer = vec3(0.0);

    // If sun is above horizon, the sun disk and sky is visible.
    // We use the precomputed SkyView LUT to get this value.
    // The sky has low visual frequency, so it is more efficient to look up the values from a low resolution texture
    // than it is to raymarch for each pixel.

    float distanceToGround;

    // Luminance NOT from the sun and should NOT be multiplied by sun intensity
    vec3 surfaceLuminance = vec3(0.0);

    const vec2 uvGBuffer = (vec2(texelCoord) + vec2(0.5, 0.5)) / vec2(pc.gbufferExtent);
    PBRTexel material = convertPBRProperties(sampleGBuffer(uvGBuffer));

    const float cos_directionZenith = dot(direction, position) / (length(direction) * length(position));

    const LightDirectional sunDirectionalLight = pc.directionalLights.lights[pc.sunLightIndex];

    // GBuffer has +y down, skip rendering gbuffer results if we are underground
    if (sceneDepth == 0.0 || material.position.y > 0.0)
    {
        // Sampling shadowmap here is pointless since we will not be on this branch if the view is in a shadow cast by
        // the sun
        const float shadowFactor = 1.0;
        sunIlluminanceToSkyLuminanceTransfer +=
            sampleEnvironmentLuminanceTransfer(atmosphere, position, direction, shadowFactor);
    }
    else // sceneDepth > 0.0 && material.position.y < 0.0
    {
        surfaceLuminance = imageLoad(image, texelCoord).rgb;

        const ShadowFrame shadowframe = computeShadowFrame(
            sunDirectionalLight.projection * sunDirectionalLight.view, material.position, material.normal);
        // TODO: Add separate index for sun shadowmap in push constant since it technically is independent
        const float surfaceSunShadowFactor =
            sampleShadowMap(shadowMaps[pc.sunLightIndex], shadowMapSampler, shadowframe);

        material.normal.y *= -1;
        material.position.y *= -1;
        material.position /= 1000000.0;
        material.position.y += atmosphere.planetRadiusMm;

        sunIlluminanceToSkyLuminanceTransfer +=
            computeGeometryLuminanceTransfer(atmosphere, position, direction, material, surfaceSunShadowFactor);

        // Ad-hoc single bounce reflection, for metals only
        const vec3 transmittanceToSurface =
            sampleTransmittanceLUT_Segment(transmittance_LUT, atmosphere, position, material.position);
        const vec3 reflectionDirection = reflectDirection(material.normal, -direction);
        sunIlluminanceToSkyLuminanceTransfer +=
            transmittanceToSurface * material.metallic * computeFresnel(material, -direction, reflectionDirection)
            * sampleEnvironmentLuminanceTransfer(
                atmosphere, material.position, reflectionDirection, surfaceSunShadowFactor);
    }

    vec3 luminance = sunIlluminanceToSkyLuminanceTransfer * atmosphere.sunIntensitySpectrum;

    // ad-hoc tonemapping
    const vec3 color = pow(luminance * 10.0 + surfaceLuminance, vec3(1.2));

    imageStore(image, texelCoord, vec4(color, 1.0));
}